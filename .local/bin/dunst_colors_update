#!/usr/bin/env bash

# https://github.com/dunst-project/dunst/blob/master/contrib/dunst_xr_theme_changer.sh
# Edited to generate the config inplace, use xrdb, removed help/usage and a hacky way to reload the config

set -e

# Check if xrdb is installed
if [ ! "$(command -v xrdb)" ]; then
    printf 'Install xorg-xrdb for archlinux'
    notify-send -u critical 'Install xorg-xrdb for archlinux'
    exit 1
fi

# Function to get resource values
xrdb_get () {
    output="$(xrdb -query | grep -w "$1" | head -n1 | cut -f2)"
    default="$2"
    printf '%s' "${output:-$default}"
}

# ["<sec>-<attr>"]="<val>|$(xrdb_get '<X_res>' '<dev_val>')"
# Each <variable> means the following:
# * sec - current section name e.g.: global.
# * attr - current attribute name e.g.: frame-color.
# * val - a simple value e.g.: "#fffeee", Monospace, 11...
# * X_res - X resource name e.g.: color8.
# * dev_val - default value to set if X_res is not found e.g.: #65737e.
# Attributes dictionary. Add or remove attributes
declare -A theme_attr_dict=(
    ["global-frame_color"]="\"$(xrdb_get 'color1' '#A6A294')\""
    #["global-separator_color"]="\"$(xrdb_get 'color6' 'auto')\""

    ["urgency_low-background"]="\"$(xrdb_get 'color1' '#5A524F')\""
    ["urgency_low-foreground"]="\"$(xrdb_get 'color7' '#FFFFFF')\""

    ["urgency_normal-background"]="\"$(xrdb_get 'color1' '#5A524F')\""
    ["urgency_normal-foreground"]="\"$(xrdb_get 'color7' '#FFFFFF')\""
)

# Attributes dictionary keys.
readonly valid_keys="${!theme_attr_dict[@]}"

# File paths
# User config dir and file
readonly user_conf_dir="${XDG_CONFIG_HOME:-$HOME/.config}/dunst"
readonly user_conf="$user_conf_dir/dunstrc"

# Check if the user config file exists
if ! [ -f "$user_conf" ]; then
    printf '"%s" file does not exist.\n' "$user_conf"
    notify-send -u critical "$user_conf does not exist"
    exit 1
fi

# Regular expressions
readonly re_section_line='^\[(.*)\]$'
readonly re_empty_comment_line='(^$)|(^[[:space:]]*(\#)|(;))'
readonly re_attribute_line='^([[:space:]]*)([_[:alnum:]]+)'

# Create an array with the file lines
mapfile -t conf < "$user_conf"

# Iterate over the file lines
for idx in "${!conf[@]}"; do
    # Current line
    curr_line="${conf[$idx]}"
    # If we are in a new section:
    if [[ "$curr_line" =~ $re_section_line ]]; then
        curr_section="${BASH_REMATCH[1]}"
        continue
    fi
    # Skip the line if it is empty or has a comment
    if [[ "$curr_line" =~ $re_empty_comment_line ]]; then
        continue
    fi
    # Get the attribute in the current line
    [[ "$curr_line" =~ $re_attribute_line ]]
    curr_attr_name="${BASH_REMATCH[2]}"
    curr_sett_name="${curr_section}-${curr_attr_name}"
    # If the current attribute is not in our dictionary, continue
    case "$valid_keys" in
        *"$curr_sett_name"*)
            printf -v conf[$idx] '    %s = %s' \
                   "${curr_attr_name}" \
                   "${theme_attr_dict[$curr_sett_name]}"
            ;;
    esac
done


# After everything is completed, write the new config to a file
user_xr_color_conf_content+="$(printf '%s\n' "${conf[@]}")"

printf '%s\n' "$user_xr_color_conf_content" > "$user_conf"
printf '"%s" updated successfully.\n' "$user_conf"

# Apparently dunst is started automatically when a notif is sent
# This seems like a hacky way to make it reload its config
killall dunst

notify-send "$user_conf updated successfully"
