[mgr]
ratio          = [ 1, 3, 4 ]
sort_by        = "natural"
sort_sensitive = false
sort_reverse   = false
sort_dir_first = true
sort_translit  = false
linemode       = "size"
show_hidden    = false
show_symlink   = true
scrolloff      = 9
mouse_events   = [ "click", "scroll" ]
title_format   = "Yazi: {cwd}"

[preview]
wrap            = "no"
tab_size        = 2
max_width       = 1280
max_height      = 720
cache_dir       = ""
image_delay     = 30
image_filter    = "triangle"
image_quality   = 90
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
edit = [
    { run = '${EDITOR:-vi} "$@"', block = true,  orphan = false, desc = "$EDITOR",      for = "unix" },
    { run = 'code "$@"',          block = false, orphan = true,  desc = "code",         for = "unix" },
    { run = 'code -w "$@"',       block = true,  orphan = true,  desc = "code (block)", for = "unix" }
]
open = [
    { run = 'xdg-open "$1"', desc = "Open (xdg-open)", for = "linux" }
]
reveal = [
    { run = 'xdg-open "$(dirname "$1")"', desc = "Reveal (xdg-open)", for = "linux" }
]
archive = [
    { run = 'als "$@" | less', block = true, orphan = false, desc = "List archive content into less", for = "linux" }
]
extract = [
    { run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" }
]
compress = [
    { run = 'notify-send "$@"', desc = "Compress files", for = "unix" } # Change this
]
play = [
    { run = 'mpv --force-window "$@"', block = false, orphan = true,  for = "unix" },
    { run = 'mediainfo "$1" | less',   block = true,  orphan = false, desc = "mediainfo", for = "unix" },
]
image = [
    { run = 'nsxiv -p -a "$@"',                                                                                                            block = false, orphan = true,  desc = "nsxiv (selection)",   for = "linux" },
    { run = '''find "." -maxdepth 1 -type f | grep -iE '\.(jpe?g|png|gif|svg|webp|tiff|heif|avif|ico|bmp)$' | sort -V | nsxiv -p -a -i''', block = false, orphan = true,  desc = "nsxiv (all, sorted)", for = "linux" },
    { run = 'mediainfo "$1" | less',                                                                                                       block = true,  orphan = false, desc = "mediainfo",           for = "unix" },
]

[open]
rules = [
    # Folder
    { name = "*/", use = [ "edit", "open", "reveal" ] },
    # Text
    { mime = "text/*", use = [ "edit", "reveal" ] },
    # Image
    { mime = "image/*", use = [ "image", "mediainfo", "open", "reveal" ] },
    # Media
    { mime = "{audio,video}/*", use = [ "play", "mediainfo", "reveal" ] },
    # Archive
    { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = [ "archive", "extract", "reveal" ] },
    # JSON
    { mime = "application/{json,ndjson}", use = [ "edit", "reveal" ] },
    { mime = "*/javascript", use = [ "edit", "reveal" ] },
    # Empty file
    { mime = "inode/empty", use = [ "edit", "reveal" ] },
    # Fallback
    { name = "*", use = [ "open", "reveal", "compress" ] },
]

[tasks]
micro_workers    = 10
macro_workers    = 10
bizarre_retry    = 3
image_alloc      = 536870912 # 512MB
image_bound      = [ 0, 0 ]
suppress_preload = false

[plugin]
# Plugin fetchers/previewers
prepend_preloaders = [
    { mime = "application/zip", run = "mangathumb" },
    { mime = "audio/*", run = "audio-preview" },
]
prepend_previewers = [
    { mime = "application/zip", run = "mangathumb" },
    { mime = "audio/*", run = "audio-preview" },
]
fetchers = [
    # Mimetype
    { id = "mime", name = "*", run = "mime", prio = "high" },
]
spotters = [
    { name = "*/", run = "folder" },
    # Code
    { mime = "text/*", run = "code" },
    { mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
    # Image
    { mime = "image/{avif,hei?,jxl}", run = "magick" },
    { mime = "image/svg+xml", run = "svg" },
    { mime = "image/*", run = "image" },
    # Video
    { mime = "video/*", run = "video" },
    # Fallback
    { name = "*", run = "file" },
]
preloaders = [
    # Image
    { mime = "image/{avif,hei?,jxl}", run = "magick" },
    { mime = "image/svg+xml", run = "svg" },
    { mime = "image/*", run = "image" },
    # Video
    { mime = "video/*", run = "video" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
    # Font
    { mime = "font/*", run = "font" },
    { mime = "application/ms-opentype", run = "font" },
]
previewers = [
    { name = "*/", run = "folder" },
    # Code
    { mime = "text/*", run = "code" },
    { mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
    # JSON
    { mime = "application/{json,ndjson}", run = "json" },
    # Image
    { mime = "image/{avif,hei?,jxl}", run = "magick" },
    { mime = "image/svg+xml", run = "svg" },
    { mime = "image/*", run = "image" },
    # Video
    { mime = "video/*", run = "video" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
    # Archive
    { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "archive" },
    { mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" },
    { name = "*.{AppImage,appimage}", run = "archive" },
    # Virtual Disk / Disk Image
    { mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
    { mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
    { name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },
    # Font
    { mime = "font/*", run = "font" },
    { mime = "application/ms-opentype", run = "font" },
    # Empty file
    { mime = "inode/empty", run = "empty" },
    # Fallback
    { name = "*", run = "file" },
]

[input]
cursor_blink = false

# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 3 ]

# create
create_title  = [ "Create:", "Create (dir):" ]
create_origin = "top-center"
create_offset = [ 0, 2, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ]
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]

[confirm]
# trash
trash_title  = "Trash {n} selected file{s}?"
trash_origin = "center"
trash_offset = [ 0, 0, 70, 20 ]

# delete
delete_title  = "Permanently delete {n} selected file{s}?"
delete_origin = "center"
delete_offset = [ 0, 0, 70, 20 ]

# overwrite
overwrite_title   = "Overwrite file?"
overwrite_content = "Will overwrite the following file:"
overwrite_origin  = "center"
overwrite_offset  = [ 0, 0, 50, 15 ]

# quit
quit_title   = "Quit?"
quit_content = "The following tasks are still running, are you sure you want to quit?"
quit_origin  = "center"
quit_offset  = [ 0, 0, 50, 15 ]

[pick]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]

[which]
sort_by        = "none"
sort_sensitive = false
sort_reverse   = false
sort_translit  = false
