#!/bin/sh

# Example for $XDG_CONFIG_HOME/nsxiv/exec/key-handler
# Called by nsxiv(1) after the external prefix key (C-x by default) is pressed.
# The next key combo is passed as its first argument. Passed via stdin are the
# images to act upon: all marked images, if in thumbnail mode and at least one
# image has been marked, otherwise the current image. nsxiv(1) will block until
# the handler terminates. It then checks which images have been modified and
# reloads them.

# By default nsxiv(1) will send one image per-line to stdin, however when using
# -0 the image list will be NULL separated and the environment variable
# "$NSXIV_USING_NULL" will be set to 1.

# The key combo argument has the following form: "[C-][M-][S-]KEY",
# where C/M/S indicate Ctrl/Meta(Alt)/Shift modifier states and KEY is the X
# keysym as listed in /usr/include/X11/keysymdef.h without the "XK_" prefix.
# If KEY has an uppercase equivalent, S-KEY is resolved into it. For instance,
# K replaces S-k and Scedilla replaces S-scedilla, but S-Delete is sent as-is.

copy_img_to_dir(){
    abspath="$(realpath "$file")"
    cp --backup=numbered "$1" "$2" \
        && notify-send "Image copied to nsxiv directory" -i "$abspath" \
        || notify-send -u critical "Couldn't copy $1"
}

copy_img_to_clipboard(){
    abspath="$(realpath "$1")"
    if [[ "$1" == *.png ]]; then
        xclip -selection clipboard -target image/png -i "$1" &> /dev/null \
            && notify-send "Image copied to clipboard" -i "$abspath" \
            || notify-send -u critical "Couldn't copy $1"
    else
        magick "$1" png:- | xclip -selection clipboard -target image/png -i &> /dev/null \
            && notify-send "Image copied to clipboard" -i "$abspath" \
            || notify-send -u critical "Couldn't copy $1"
    fi
}

delete_file(){
    rm "$1"
    notify-send "$1 Deleted"
}

case "$1" in
    "y") # Copy marked/single image to ~/Pictures/nsxiv
        pic_dir="$HOME/Pictures/nsxiv"
        mkdir -p "$pic_dir" || { notify-send -u critical "Couldn't create $pic_dir"; exit; }
        while read -r file; do copy_img_to_dir "$file" "$pic_dir"; done
        ;;
    "i") # Copy image to clipboard (converting it to png before if it isn't already png)
        read -r file
        copy_img_to_clipboard "$file"
        ;;
    "w") # Set selected file as wallpaper
        read -r file
        hsetroot -cover "$file"
        ;;
    "d") # Delete the selected files (dmenu confirmation)
        . $HOME/.dmenurc
        while read -r file; do
            [ "$(printf "Yes\\nNo" | dmenu "${DMENU_ARGS[@]}" -p "Really delete $file?")" = "Yes" ] && delete_file "$file"
        done
        ;;
    "C-d") # Drag and drop selected image
        read -r file
        dragon-drop -x "$file"
        ;;
    "greater") # (>) Rotate clockwise 90 degress and save images
        while read -r file; do magick "$file" -rotate 90 "$file"; done
        ;;
    "less") # (<) Rotate counter-clockwise 90 degrees and save images
        while read -r file; do magick "$file" -rotate -90 "$file"; done
        ;;
    "bar") # (|) Flip horizontally and save images
        while read -r file; do magick "$file" -flop "$file"; done
        ;;
    "underscore") # (_) Flip vertically and save images
        while read -r file; do magick "$file" -flip "$file"; done
        ;;
esac

